#! /usr/bin/env php
<?php
/**
 * Copyright (c) 2009-2012 [Ryan Parman](http://ryanparman.com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * <http://www.opensource.org/licenses/mit-license.php>
 */


// Load the bootstrap
require_once dirname(__DIR__) . '/src/bootstrap.php';

// List the namespaces to use
use Symfony\Component\Console\Application,
    Symfony\Component\Console\Formatter\OutputFormatterStyle as ConsoleFormat,
    Symfony\Component\Console\Input\InputInterface,
    Symfony\Component\Console\Input\InputArgument,
    Symfony\Component\Console\Input\InputOption,
    Symfony\Component\Console\Output\OutputInterface,
    Symfony\Component\EventDispatcher\Event,
    Symfony\Component\EventDispatcher\EventDispatcher,
    Symfony\Component\Filesystem\Filesystem,
    Vanity\Console,
    Vanity\Console\Utilities as ConsoleUtil,
    Vanity\Event\Dispatcher,
    Vanity\Event\InputOutput as EventIO;

// Instantiate
$vanity_console = new Application('Vanity', VANITY_VERSION);
Dispatcher::set(new EventDispatcher());

// CLI colors
$defaults = new ConsoleFormat('yellow');
$h1_formatter = new ConsoleFormat('yellow');
$h1_formatter->setOption('bold');
$h2_formatter = new ConsoleFormat('green');

// Register events
include_once VANITY_SYSTEM . '/src/register.php';

// Version
$vanity_console
	->register('version')
	->setDescription('Displays the version number of the software.')
	->setCode(function(InputInterface $input, OutputInterface $output)
	{
		$output->writeln(sprintf('Vanity %s', VANITY_VERSION));
	});

// Fetch
$vanity_console
	->register('fetch')
	->setDescription('Fetches a copy of the latest PHP API Reference from PHP.net. Useful when extending PHP\'s base classes.')
	->setCode(function(InputInterface $input, OutputInterface $output)
	{
		// Instantiate
		$event = new EventIO($input, $output);
		$filesystem = new Filesystem();

		// Handle a fresh checkout
		if (!is_dir(VANITY_CACHE_DIR))
		{
			if ($filesystem->mkdir(VANITY_CACHE_DIR, 0777))
			{
				Dispatcher::get()->dispatch('console.fetch.checkout', $event);
			}
		}

		// Handle an update
		else
		{
			Dispatcher::get()->dispatch('console.fetch.update', $event);
		}
	});

// Parse
$vanity_console
	->register('parse')
	->setDescription('Parses the PHP project, producing intermediary JSON definitions. Must be run before `vanity generate`.')
	->setDefinition(array(

		// What do we call it?
		new InputOption('product-version', null, InputOption::VALUE_REQUIRED, 'The version of the product.'),

		// Project site integration
		new InputOption('github',      null, InputOption::VALUE_OPTIONAL, 'The pattern of your GitHub project: {user}:{repository}:{tag-branch-or-commit} (e.g., skyzyx:vanity:master).'),
		new InputOption('google-code', null, InputOption::VALUE_OPTIONAL, 'The name of your Google Code project: {project}:{path-to-project-source} (e.g., pubsubhubbub:branches/perl-stable).'),

		// How do we parse this thing?
		new InputOption('bootstrap', 'b', InputOption::VALUE_OPTIONAL, 'The bootstrap file which informs how the classes should be autoloaded.'),
		new InputOption('match',     'm', InputOption::VALUE_OPTIONAL, 'The pattern of file names to match. ' . $defaults->apply('(default: *.php)')),

		// Types of data to exclude?
		new InputOption('exclude-access',  'A', InputOption::VALUE_OPTIONAL, 'Comma-separated list of the access types to exclude (i.e., private, protected, public, static, final). ' . $defaults->apply('(default: private)')),
		new InputOption('exclude-classes', 'C', InputOption::VALUE_OPTIONAL, 'Regex pattern of class names to exclude. ' . $defaults->apply('(default: /Exception/i)')),
		new InputOption('exclude-methods', 'M', InputOption::VALUE_OPTIONAL, 'Regex pattern of method names to exclude. ' . $defaults->apply('(default: /__([a-z]+)/i)')),

		// Additional definitions
		new InputOption('use-changelog', null, InputOption::VALUE_OPTIONAL, 'The name of the CHANGELOG definition to use. ' . $defaults->apply('(default: changelog.yml)')),
		new InputOption('use-groups',    null, InputOption::VALUE_OPTIONAL, 'The name of the method grouping definition to use. ' . $defaults->apply('(default: groups.yml)')),
		new InputOption('use-seealso',   null, InputOption::VALUE_OPTIONAL, 'The name of the "see also" definition to use. ' . $defaults->apply('(default: seealso.yml)')),

		// Extra generation
		new InputOption('generate-indexes', 'i',  InputOption::VALUE_OPTIONAL, 'Whether or not to generate indexes for the source. ' . $defaults->apply('(default: true)')),
		new InputOption('generate-todos',   't',  InputOption::VALUE_OPTIONAL, 'Whether or not to generate TODOs for the source. ' . $defaults->apply('(default: true)')),
		new InputOption('pattern-todos',    null, InputOption::VALUE_OPTIONAL, 'The regex pattern to use for determining TODOs. ' . $defaults->apply('(default: /@?\s*todo(:|\s)+/i)')),

		// Warnings
		new InputOption('warn-todo',   'W', InputOption::VALUE_OPTIONAL, 'Whether or not to display a warning on the CLI about TODOs in the source code. ' . $defaults->apply('(default: false)')),
		new InputOption('warn-groups', 'G', InputOption::VALUE_OPTIONAL, 'Whether or not to display a warning on the CLI about ungrouped methods in the `groups.yml` file. ' . $defaults->apply('(default: true)')),

		// Project stage
		new InputOption('stage', 's', InputOption::VALUE_OPTIONAL, 'The stage that the project is currently in (e.g., development, alpha, beta, rc, production). ' . $defaults->apply('(default: production)')),
	))
	->setCode(function(InputInterface $input, OutputInterface $output) use ($h1_formatter, $h2_formatter)
	{
		$output->writeln('');

		// List the application information
		$output->writeln($h1_formatter->apply('VANITY ' . VANITY_VERSION));
		$output->writeln(TAB . 'by Ryan Parman <http://ryanparman.com> and Contributors');
		$output->writeln(TAB . 'http://vanitydoc.org');
		$output->writeln('');

		// List the primary environment variables
		$environment_variables = array(
			'USER_DATA'                  => USER_DATA,
			'VANITY_SYSTEM'              => VANITY_SYSTEM,
			'VANITY_PROJECT_WORKING_DIR' => VANITY_PROJECT_WORKING_DIR,
			'VANITY_PROJECT_CONFIG_DIR'  => VANITY_PROJECT_CONFIG_DIR,
		);

		$padding = ConsoleUtil::tablify($environment_variables);
		$output->writeln($h1_formatter->apply('ENVIRONMENT VARIABLES:'));
		foreach ($environment_variables as $key => $value)
		{
			$output->writeln(ConsoleUtil::indent(str_pad($key, $padding) . ' : ' . $h2_formatter->apply($value), $h2_formatter->apply('-> ')));
		}
		$output->writeln('');

		$event = new EventIO($input, $output);

		// Config
		Dispatcher::get()->dispatch('config.read', $event);
		Dispatcher::get()->dispatch('config.apply', $event);
		Dispatcher::get()->dispatch('config.display', $event);

		// Lexer
		Dispatcher::get()->dispatch('parser.lexer.find_project_files', $event);
		Dispatcher::get()->dispatch('parser.lexer.get_class_list', $event);
			# parser.lexer.load_class_file
			# parser.lexer.reflect_class_file
			# ----
			# parser.lexer.map_entities
			# parser.lexer.load_phpdoc_file
			# parser.lexer.parse_phpdoc_file
		Dispatcher::get()->dispatch('parser.lexer.load_content_overrides', $event);
		Dispatcher::get()->dispatch('parser.lexer.linkify', $event);

		// Write the intemediate data
		# parser.writer.clean_output_dir
		# parser.writer.intermediate
		# parser.writer.todos
		# parser.writer.indexes
		# parser.writer.manifest
		# parser.writer.search
		# parser.writer.browse
	});

// Generate
$vanity_console
	->register('generate')
	->setDescription('Reads the JSON definitions and merges them with templates to produce the output.')
	->setCode(function(InputInterface $input, OutputInterface $output)
	{
		$event = new EventIO($input, $output);

		// Config
		Dispatcher::get()->dispatch('config.read', $event);
		Dispatcher::get()->dispatch('config.display', $event);

		# generator.templates.find
		# generator.templates.copy_static

		# generator.wiki.read_markdown
		# generator.wiki.convert_to_html
		# generator.wiki.linkify

		# generator.format.annotated
		# generator.format.chm
		# generator.format.docbook
		# generator.format.epub
		# generator.format.graphiz
		# generator.format.html.desktop
		# generator.format.html.mobile
		# generator.format.kindle
		# generator.format.manpage
		# generator.format.markdown
		# generator.format.mediawiki
		# generator.format.odt
		# generator.format.pdf
		# generator.format.php
		# generator.format.rtf
		# generator.format.xml

		# generator.archive.lzma.7z
		# generator.archive.lzma.xz
		# generator.archive.tar.bz2
		# generator.archive.tar.gz
		# generator.archive.zip
	});

$vanity_console->run();

#! /usr/bin/env php
<?php
/**
 * Copyright (c) 2009-2012 [Ryan Parman](http://ryanparman.com)
 * Copyright (c) 2011-2012 [Amazon Web Services, Inc.](http://aws.amazon.com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * <http://www.opensource.org/licenses/mit-license.php>
 */


// Load the bootstrap
require_once __DIR__ . '/src/bootstrap.php';

// List the namespaces to use
use Monolog\Logger as Monolog;
use Monolog\Handler\StreamHandler;
use Monolog\Processor\IntrospectionProcessor;
use Symfony\Component\Console\Application;
use Symfony\Component\EventDispatcher\EventDispatcher;
use Vanity\Config\Store as ConfigStore;
use Vanity\GlobalObject\Dispatcher;
use Vanity\GlobalObject\Logger;
use Vanity\System\Store as SystemStore;
use Vanity\System\Timer;


/********************************************************/
// INSTANTIATE CONSOLE APPLICATION

// Instantiate Event Dispatcher
Dispatcher::set(new EventDispatcher);

$time = time();
$vanity_logs = sys_get_temp_dir();
SystemStore::add('_.log_dir', $vanity_logs);
SystemStore::add('_.run_time', $time);

// Which PHP family are we running?
SystemStore::add('_.php53', version_compare(PHP_VERSION, '5.3.0', '>='));
SystemStore::add('_.php54', version_compare(PHP_VERSION, '5.4.0', '>='));
SystemStore::add('_.php55', version_compare(PHP_VERSION, '5.5.0', '>='));

// Construct per-run logging handlers
$streamError   = new StreamHandler($vanity_logs . "/vanity-run-${time}-error.log",  Monolog::ERROR);
$streamWarning = new StreamHandler($vanity_logs . "/vanity-run-${time}-warning.log",  Monolog::WARNING);
$streamInfo    = new StreamHandler($vanity_logs . "/vanity-run-${time}-info.log",  Monolog::INFO);
$streamDebug   = new StreamHandler($vanity_logs . "/vanity-run-${time}-debug.log", Monolog::DEBUG);
$streamDebug->pushProcessor(new IntrospectionProcessor);

// Construct long-term logging handlers
$ltStreamError   = new StreamHandler($vanity_logs . "/vanity-run-error.log",  Monolog::ERROR);
$ltStreamWarning = new StreamHandler($vanity_logs . "/vanity-run-warning.log",  Monolog::WARNING);
$ltStreamInfo    = new StreamHandler($vanity_logs . "/vanity-run-info.log",  Monolog::INFO);
$ltStreamDebug   = new StreamHandler($vanity_logs . "/vanity-run-debug.log", Monolog::DEBUG);
$ltStreamDebug->pushProcessor(new IntrospectionProcessor);

// Instantiate the logger
$logger = new Monolog('Vanity');
$logger->pushHandler($streamError);
$logger->pushHandler($streamWarning);
$logger->pushHandler($streamInfo);
$logger->pushHandler($streamDebug);
$logger->pushHandler($ltStreamError);
$logger->pushHandler($ltStreamWarning);
$logger->pushHandler($ltStreamInfo);
$logger->pushHandler($ltStreamDebug);
Logger::set($logger);

// Instantiate Application
$console = new Application('Vanity', VANITY_VERSION);

$console->add(new Vanity\Command\PHP\Fetch);
$console->add(new Vanity\Command\Parse\API);

Timer::start();


/********************************************************/
// REGISTER GLOBAL EVENT HANDLERS

Vanity\Event\RegisterGlobal::events();


/********************************************************/
// RUN THE APPLICATION

$console->run();
